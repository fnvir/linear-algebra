from __future__ import annotations
from collections.abc import Iterable, Callable
from numbers import Number,Integral

class DimensionError(ValueError):
    def __init__(self,err:str='Dimensions do not match for this operation'):...


class Matrix:
    __a: list
    n: int
    m: int
    dim: tuple
    def __init__(self, _matrix: Iterable[Number | Iterable[Number | str] | str], fractional: bool = False) -> None: ...
    @classmethod
    def from_order(cls, r: int, c: int, _fill: Number | str = 0) -> Matrix: ...
    @staticmethod
    def identity(n: int) -> Matrix: ...
    def transpose(self) -> Matrix: ...
    def determinant(self) -> Number: ...
    def trace(self) -> Number: ...
    @property
    def T(self) -> Matrix: ...
    @property
    def det(self) -> Number: ...
    def multiply(a, b: Matrix) -> Matrix: ...
    def inverse(self) -> Matrix: ...
    def __echelon_form(self, reduced: bool = False) -> Matrix: ...
    def ref(self) -> Matrix: ...
    def rref(self) -> Matrix: ...
    def lower_upper(self) -> tuple[Matrix, Matrix]: ...
    def concat(self, other: Matrix) -> Matrix: ...
    def map(self, f: Callable) -> Matrix: ...
    def is_ref(self) -> bool: ...
    def is_rref(self) -> bool: ...
    def __is_echelon_form(self, reduced: bool = False) -> bool: ...
    def is_singular(self) -> bool: ...
    def is_square(self) -> bool: ...
    def is_diagonal(self) -> bool: ...
    def is_upper_triangular(self) -> bool: ...
    def is_lower_triangular(self) -> bool: ...
    def row_slice(self, *args: int | None) -> Matrix: ...
    def col_slice(self, *args: int | None) -> Matrix: ...
    def __slice(self, r: slice | int, c: slice | int) -> Number | Matrix: ...
    def __len__(self) -> int: ...
    def __setitem__(self, i: int, x: Iterable) -> None: ...
    def __getitem__(self, k: int | slice | tuple[int | slice]) -> Number | list | Matrix: ...
    def __neg__(self) -> Matrix: ...
    def __pos__(self) -> Matrix: ...
    def __reversed__(self) -> Matrix: ...
    def __add__(self, other: Matrix) -> Matrix: ...
    def __radd__(self, other: Matrix) -> Matrix: ...
    def __sub__(self, other: Matrix) -> Matrix: ...
    def __rsub__(self, other: Matrix) -> Matrix: ...
    def __mul__(self, other: Matrix | Number) -> Matrix: ...
    def __rmul__(self, other: Matrix | Number) -> Matrix: ...
    def __matmul__(self, other: Matrix) -> Matrix: ...
    def __truediv__(self, x: Number) -> Matrix: ...
    def __floordiv__(self, x: Number) -> Matrix: ...
    def __mod__(self, x: Integral) -> Matrix: ...
    def __round__(self, n: Integral) -> Matrix: ...
    def __pow__(self, x: Integral, m: Integral) -> Matrix: ...
    def __modpow(self, p: Integral, m: Integral) -> Matrix: ...
    def __invert__(self) -> Matrix: ...
    def __copy__(self) -> Matrix: ...
    def __sizeof__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: Matrix) -> bool: ...
