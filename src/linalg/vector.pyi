from __future__ import annotations
from numbers import Rational,Real,Integral
from typing import Callable


class Vector:
    __v: tuple
    def __init__(self, _i: Rational | str = 0, _j: Rational | str = 0, _k: Rational | str = 0, fractional: bool = False): ...
    def dot(self, o: Vector) -> Rational: ...
    def cross(s, o: Vector) -> Vector: ...
    @staticmethod
    def angle(a: Vector, b: Vector, radian: bool = False) -> Rational: ...
    def project_on(a, b: Vector) -> Vector: ...
    def unit(self) -> Vector: ...
    def cardinality(self) -> int: ...
    @property
    def dim(self) -> int: ...
    def norm(self) -> int | float: ...
    def map(self, f: Callable) -> Vector: ...
    def __len__(self) -> int: ...
    def __getitem__(self, i) -> Rational: ...
    def __copy__(self) -> Vector: ...
    def __abs__(self) -> Rational: ...
    def __pos__(self) -> Vector: ...
    def __neg__(self) -> Vector: ...
    def __add__(a, b: Vector) -> Vector: ...
    def __radd__(a, b: Vector) -> Vector: ...
    def __sub__(a, b: Vector) -> Vector: ...
    def __rsub__(a, b: Vector) -> Vector: ...
    def __mul__(a, b: Vector | Real) -> Vector | Real: ...
    def __rmul__(a, b: Vector | Rational) -> Vector | Rational: ...
    def __truediv__(a, b: Real) -> Vector: ...
    def __floordiv__(a, b: Real) -> Vector: ...
    def __mod__(a, b: Integral) -> Vector: ...
    def __pow__(self, p: Integral, m: Integral = None) -> Vector | Rational: ...
    def __modpow(self, p: Integral, m: Integral = None) -> Vector | Rational: ...
    def __trunc__(self) -> Vector: ...
    def __floor__(self) -> Vector: ...
    def __ceil__(self) -> Vector: ...
    def __round__(self, n: Integral = None) -> Vector: ...
    def __bool__(self) -> bool: ...
    def __sizeof__(self) -> int: ...
    def __eq__(self, other: Vector) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
